import { CheckCircle, XCircle, AlertCircle } from "lucide-react";
import { useRouter } from "next/navigation";
import { Button } from "../../common/button";

interface ResultDisplayProps {
  result: { success: boolean; message: string; details?: string } | null;
  onRestart?: () => void;
  onRetryStep?: (stepNumber: number) => void;
  failedStep?: number | null;
}

export default function ResultDisplay({ 
  result, 
  onRestart, 
  onRetryStep, 
  failedStep 
}: ResultDisplayProps) {
  const router = useRouter();

  const handleGoHome = () => {
    router.push('/');
  };
  if (!result) {
    return (
      <div className="text-center py-8">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <h3 className="text-lg font-semibold text-gray-700 mb-2">ƒêang x·ª≠ l√Ω...</h3>
        <p className="text-sm text-gray-600">
          Vui l√≤ng ch·ªù trong gi√¢y l√°t, ch√∫ng t√¥i ƒëang x√°c minh th√¥ng tin c·ªßa b·∫°n
        </p>
      </div>
    );
  }

  const isSuccess = result.success;
  const IconComponent = isSuccess ? CheckCircle : XCircle;
  const iconColor = isSuccess ? "text-green-600" : "text-red-600";
  const bgColor = isSuccess ? "bg-green-50" : "bg-red-50";
  const borderColor = isSuccess ? "border-green-200" : "border-red-200";

  return (
    <div className="text-center py-6">
      <div className={`inline-flex items-center justify-center w-16 h-16 rounded-full ${bgColor} ${borderColor} border-2 mb-4`}>
        <IconComponent className={`w-8 h-8 ${iconColor}`} />
      </div>

      <h3 className={`text-xl font-semibold mb-2 ${isSuccess ? "text-green-700" : "text-red-700"}`}>
        {result.message}
      </h3>

      {result.details && (
        <p className="text-sm text-gray-600 mb-4 max-w-md mx-auto">
          {result.details}
        </p>
      )}

      <div className="mt-6 space-y-3">
        {isSuccess ? (
          <>
            <div className="flex items-center justify-center gap-2 text-sm text-green-600">
              <CheckCircle className="w-4 h-4" />
              <span>X√°c minh th√†nh c√¥ng</span>
            </div>
            <div className="flex items-center justify-center gap-2 text-sm text-green-600">
              <CheckCircle className="w-4 h-4" />
              <span>T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t</span>
            </div>
            <p className="text-sm text-gray-600 mt-4">
              B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng c·ªßa ·ª©ng d·ª•ng
            </p>
          </>
        ) : (
          <>
            <div className="flex items-center justify-center gap-2 text-sm text-red-600">
              <XCircle className="w-4 h-4" />
              <span>X√°c minh th·∫•t b·∫°i</span>
            </div>
            <div className="flex items-center justify-center gap-2 text-sm text-red-600">
              <AlertCircle className="w-4 h-4" />
              <span>Th√¥ng tin kh√¥ng kh·ªõp ho·∫∑c kh√¥ng r√µ n√©t</span>
            </div>
            <p className="text-sm text-gray-600 mt-4">
              Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin v√† th·ª≠ l·∫°i
            </p>
            
            {/* Show step-specific retry options */}
            {failedStep && onRetryStep && (
              <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <h4 className="font-medium text-yellow-800 mb-2">Ch·ªçn b∆∞·ªõc ƒë·ªÉ th·ª≠ l·∫°i:</h4>
                <div className="space-y-2">
                  {failedStep === 1 && (
                    <Button
                      onClick={() => onRetryStep(1)}
                      variant="outline"
                      className="w-full text-yellow-700 border-yellow-300 hover:bg-yellow-100"
                    >
                      üîÑ Th·ª≠ l·∫°i b∆∞·ªõc 1: Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i
                    </Button>
                  )}
                  {failedStep === 2 && (
                    <>
                      <Button
                        onClick={() => onRetryStep(1)}
                        variant="outline"
                        className="w-full text-yellow-700 border-yellow-300 hover:bg-yellow-100"
                      >
                        üîÑ Th·ª≠ l·∫°i b∆∞·ªõc 1: Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i
                      </Button>
                      <Button
                        onClick={() => onRetryStep(2)}
                        variant="outline"
                        className="w-full text-yellow-700 border-yellow-300 hover:bg-yellow-100"
                      >
                        üîÑ Th·ª≠ l·∫°i b∆∞·ªõc 2: Nh·∫≠p m√£ OTP
                      </Button>
                    </>
                  )}
                  {failedStep === 3 && (
                    <>
                      <Button
                        onClick={() => onRetryStep(1)}
                        variant="outline"
                        className="w-full text-yellow-700 border-yellow-300 hover:bg-yellow-100"
                      >
                        üîÑ Th·ª≠ l·∫°i b∆∞·ªõc 1: Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i
                      </Button>
                      <Button
                        onClick={() => onRetryStep(2)}
                        variant="outline"
                        className="w-full text-yellow-700 border-yellow-300 hover:bg-yellow-100"
                      >
                        üîÑ Th·ª≠ l·∫°i b∆∞·ªõc 2: Nh·∫≠p m√£ OTP
                      </Button>
                      <Button
                        onClick={() => onRetryStep(3)}
                        variant="outline"
                        className="w-full text-yellow-700 border-yellow-300 hover:bg-yellow-100"
                      >
                        üîÑ Th·ª≠ l·∫°i b∆∞·ªõc 3: T·∫£i ·∫£nh x√°c minh
                      </Button>
                    </>
                  )}
                </div>
              </div>
            )}
          </>
        )}
      </div>

      <div className="mt-6">
        {isSuccess ? (
          <Button
            onClick={handleGoHome}
            className="bg-green-600 hover:bg-green-700 text-white"
          >
            V·ªÅ trang ch·ªß
          </Button>
        ) : (
          <div className="space-y-3">
            {onRestart && (
              <Button
                onClick={onRestart}
                className="w-full bg-red-600 hover:bg-red-700 text-white"
              >
                üîÑ B·∫Øt ƒë·∫ßu l·∫°i t·ª´ ƒë·∫ßu
              </Button>
            )}
            <p className="text-xs text-gray-500 text-center">
              Ho·∫∑c ch·ªçn b∆∞·ªõc c·ª• th·ªÉ ƒë·ªÉ th·ª≠ l·∫°i ·ªü tr√™n
            </p>
          </div>
        )}
      </div>
    </div>
  );
}